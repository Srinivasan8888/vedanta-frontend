{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useState,useEffect}from'react';import ReactDOM from'react-dom';import'../popup_dashboard/popupdashboard.scss';import DeviceThermostatIcon from'@mui/icons-material/DeviceThermostat';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var generateDemoData=function generateDemoData(info,startSensorIndex,endSensorIndex){var data=[];for(var index=0;index<info.length;index++){for(var i=startSensorIndex;i<=endSensorIndex;i++){if(i<=108){var _info$index;data.push({id:\"\".concat(i),sensor:\"CBT\".concat(i),value:\"\".concat(info[index][\"sensor\".concat(i)],\" \\xB0c\"),updatedAt:(_info$index=info[index])===null||_info$index===void 0?void 0:_info$index.updatedAt});}}}return data;};var PopupDashboard=function PopupDashboard(_ref){var open_dash=_ref.open_dash,onClose=_ref.onClose,waveGuide=_ref.waveGuide;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),info=_useState2[0],setInfo=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){if(!open_dash)return;var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,infoVal;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"http://localhost:4000/sensor/updated\");case 3:response=_context.sent;_context.next=6;return response.json();case 6:infoVal=_context.sent;setInfo(infoVal);_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);setError(_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchData(){return _ref2.apply(this,arguments);};}();var interval=setInterval(function(){fetchData();},1000);return function(){clearInterval(interval);};},[open_dash]);if(!open_dash){return null;}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error.message]});}var startSensorIndex=(waveGuide-1)*10+1;var endSensorIndex=waveGuide*10;var data=generateDemoData(info,startSensorIndex,endSensorIndex);return/*#__PURE__*/ReactDOM.createPortal(/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"overlay-dash\",onClick:onClose}),info.length!==0?/*#__PURE__*/_jsx(\"div\",{className:\"popupstyledash\",children:data.map(function(item,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left text-base\",children:/*#__PURE__*/_jsx(DeviceThermostatIcon,{className:\"icon\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"right flex flex-col justify-around gap-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sensor-name text-xl te\",children:item.sensor}),/*#__PURE__*/_jsx(\"div\",{className:\"value text-xl\",children:item.value})]})]},index);})}):/*#__PURE__*/_jsx(\"div\",{className:\"load\",children:/*#__PURE__*/_jsx(\"span\",{className:\" load__text\",children:\"Loading...\"})})]}),document.getElementById('portaldashboard'));};export default PopupDashboard;","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/components/popup_dashboard/PopupDashboard.jsx"],"names":["React","useState","useEffect","ReactDOM","DeviceThermostatIcon","generateDemoData","info","startSensorIndex","endSensorIndex","data","index","length","i","push","id","sensor","value","updatedAt","PopupDashboard","open_dash","onClose","waveGuide","setInfo","error","setError","fetchData","fetch","response","json","infoVal","interval","setInterval","clearInterval","message","createPortal","map","item","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../popup_dashboard/popupdashboard.scss';\r\nimport DeviceThermostatIcon from '@mui/icons-material/DeviceThermostat';\r\n\r\nconst generateDemoData = (info, startSensorIndex, endSensorIndex) => {\r\n  const data = [];\r\n  for (let index = 0; index < info.length; index++) {\r\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\r\n      if(i <= 108) {\r\n        data.push({\r\n          id: `${i}`,\r\n          sensor: `CBT${i}`,\r\n          value: `${info[index][`sensor${i}`]} Â°c`,\r\n          updatedAt: info[index]?.updatedAt,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n};\r\n\r\nconst PopupDashboard = ({ open_dash, onClose, waveGuide }) => {\r\n  const [info, setInfo] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!open_dash) return;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/updated\");\r\n        const infoVal = await response.json();\r\n        setInfo(infoVal);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      fetchData();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [open_dash]);\r\n\r\n  if (!open_dash) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n\r\n  const startSensorIndex = (waveGuide - 1) * 10 + 1;\r\n  const endSensorIndex = waveGuide * 10;\r\n\r\n  const data = generateDemoData(info, startSensorIndex, endSensorIndex);\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className=\"overlay-dash\" onClick={onClose} />\r\n\r\n      {info.length !== 0 ? (\r\n        <div className='popupstyledash'>\r\n        \r\n        {data.map((item, index) => {\r\n          return (\r\n            <div className=\"box\" key={index}>\r\n          <div className=\"left text-base\">\r\n            <DeviceThermostatIcon className='icon'/>\r\n          </div>\r\n          <div className=\"right flex flex-col justify-around gap-2\">\r\n            <div className=\"sensor-name text-xl te\">\r\n              {item.sensor}\r\n            </div>\r\n            <div className=\"value text-xl\">\r\n              {item.value}\r\n            </div>\r\n          </div>\r\n        </div>\r\n          );\r\n        })}\r\n      </div>\r\n      ) : (\r\n        <div className='load'>\r\n          <span className=' load__text'>Loading...</span>\r\n        </div>\r\n      )}\r\n    </>,\r\n    document.getElementById('portaldashboard')\r\n  );\r\n};\r\n\r\nexport default PopupDashboard;\r\n"]},"metadata":{},"sourceType":"module"}