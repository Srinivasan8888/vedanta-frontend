{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\src\\\\pages\\\\graph\\\\ChartDash.jsx\",\n    _s = $RefreshSig$();\n\nimport \"../graph/chartdash.scss\";\nimport { Line } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\"; // class level\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst generateData = (inforeport, startSensorIndex, endSensorIndex) => {\n  const data = [];\n\n  for (let index = 0; index < inforeport.length; index++) {\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\n      if (i <= 108) {\n        var _inforeport$index;\n\n        data.push({\n          id: `${i}`,\n          sensor: `Sensor ${i}`,\n          sensorName: `CBT${i}`,\n          updatedAt: (_inforeport$index = inforeport[index]) === null || _inforeport$index === void 0 ? void 0 : _inforeport$index.updatedAt\n        });\n      }\n    }\n\n    return data;\n  }\n}; // function\n\n\nconst ChartDash = _ref => {\n  _s();\n\n  let {\n    openGraph,\n    closeGraph,\n    waveGuideSelected\n  } = _ref;\n  const [infoChart, setInfoChart] = useState([]);\n  const [error, SetError] = useState(false);\n  const [sensorData, setSensorData] = useState([]);\n  const [updateTime, setUpdateTime] = useState();\n  const [sensorName, setSenserName] = useState();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\n        const infoVal = await response.json();\n        setInfoChart(infoVal);\n      } catch (error) {\n        SetError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!openGraph) {\n    return null;\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!infoChart) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  const startSensorIndex = (waveGuideSelected - 1) * 10 + 1;\n  const endSensorIndex = waveGuideSelected * 10;\n  const chartData = generateData(infoChart, startSensorIndex, endSensorIndex);\n\n  const selectSensor = sensor => {\n    const sensorval = [];\n    const updateTime = [];\n    const trimedSensor = sensor.replace(/ /g, \"\");\n    const sensorName = trimedSensor.toLowerCase();\n\n    for (let index = 0; index < infoChart.length; index++) {\n      var _infoChart$index, _infoChart$index2;\n\n      sensorval[index] = (_infoChart$index = infoChart[index]) === null || _infoChart$index === void 0 ? void 0 : _infoChart$index[sensorName];\n      updateTime[index] = (_infoChart$index2 = infoChart[index]) === null || _infoChart$index2 === void 0 ? void 0 : _infoChart$index2.updatedAt;\n    }\n\n    setSensorData(sensorval);\n    setUpdateTime(updateTime);\n    setSenserName(sensorName);\n  };\n\n  var chartName = sensorName;\n  var updateChartName;\n\n  if (chartName) {\n    updateChartName = chartName.replace(\"sensor\", \"CBT\");\n  }\n\n  const data = {\n    labels: updateTime,\n    datasets: [{\n      label: `${updateChartName}`,\n      data: sensorData,\n      fill: false,\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      tension: 0.1\n    }]\n  };\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay-graph-dash\",\n      onClick: closeGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chartdash\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chartSelection\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-dash\",\n          children: chartData.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"box-chart-dash\",\n              onClick: () => {\n                selectSensor(item.sensor);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-base\",\n                children: item.sensorName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 13\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 13\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChartDash, \"z3JnlhnNjBnntrRy21l43aiQdmU=\");\n\n_c = ChartDash;\nexport default ChartDash;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartDash\");","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/pages/graph/ChartDash.jsx"],"names":["Line","useState","useEffect","generateData","inforeport","startSensorIndex","endSensorIndex","data","index","length","i","push","id","sensor","sensorName","updatedAt","ChartDash","openGraph","closeGraph","waveGuideSelected","infoChart","setInfoChart","error","SetError","sensorData","setSensorData","updateTime","setUpdateTime","setSenserName","fetchData","response","fetch","infoVal","json","message","chartData","selectSensor","sensorval","trimedSensor","replace","toLowerCase","chartName","updateChartName","labels","datasets","label","fill","borderColor","backgroundColor","tension","options","scales","y","beginAtZero","map","item"],"mappings":"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","sourcesContent":["import \"../graph/chartdash.scss\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n                                                                 // class level\r\nconst generateData = (inforeport, startSensorIndex, endSensorIndex) => {\r\n  const data = [];\r\n\r\n  for (let index = 0; index < inforeport.length; index++) {\r\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\r\n      if(i <= 108) {\r\n        data.push({\r\n          id: `${i}`,\r\n          sensor: `Sensor ${i}`,\r\n          sensorName: `CBT${i}`,\r\n          updatedAt: inforeport[index]?.updatedAt,\r\n        });\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n};\r\n                                                               // function\r\nconst ChartDash = ({ openGraph, closeGraph, waveGuideSelected }) => {\r\n\r\n  const [infoChart, setInfoChart] = useState([]);\r\n  const [error, SetError] = useState(false);\r\n\r\n  const [sensorData, setSensorData] = useState([]);\r\n  const [updateTime, setUpdateTime] = useState();\r\n  const [sensorName, setSenserName] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\r\n        const infoVal = await response.json();\r\n        setInfoChart(infoVal);\r\n      } catch (error) {\r\n        SetError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!openGraph) {\r\n    return null;\r\n  }\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n  if (!infoChart) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  \r\n  const startSensorIndex = (waveGuideSelected - 1) * 10 + 1;\r\n  const endSensorIndex = waveGuideSelected * 10;\r\n\r\n  const chartData = generateData(infoChart, startSensorIndex, endSensorIndex);\r\n\r\n  const selectSensor = (sensor) => {\r\n    const sensorval = [];\r\n    const updateTime = [];\r\n    const trimedSensor = sensor.replace(/ /g, \"\");\r\n    const sensorName = trimedSensor.toLowerCase();\r\n\r\n    for (let index = 0; index < infoChart.length; index++) {\r\n      sensorval[index] = infoChart[index]?.[sensorName];\r\n      updateTime[index] = infoChart[index]?.updatedAt;\r\n    }\r\n    setSensorData(sensorval);\r\n    setUpdateTime(updateTime);\r\n    setSenserName(sensorName);\r\n  };\r\n\r\n  var chartName = sensorName;\r\n  var updateChartName;\r\n  if (chartName) {\r\n        updateChartName = chartName.replace(\"sensor\", \"CBT\");\r\n    }\r\n  const data = {\r\n    labels: updateTime,\r\n    datasets: [\r\n      {\r\n        label: `${updateChartName}`,\r\n        data: sensorData,\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overlay-graph-dash\" onClick={closeGraph} />\r\n\r\n      <div className=\"chartdash\">\r\n        <div className=\"chart\">\r\n        <Line data={data} options={options} />\r\n        </div>\r\n\r\n        <div className=\"chartSelection\">\r\n        <div className=\"box-dash\">\r\n          {\r\n            chartData.map((item, index) => {\r\n              return (\r\n            <div className=\"box-chart-dash\" key={index} onClick={()=>{selectSensor(item.sensor)}}>\r\n            <span className=\"text-base\">{item.sensorName}</span>\r\n            </div>\r\n              )\r\n            })\r\n          }\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartDash;\r\n"]},"metadata":{},"sourceType":"module"}