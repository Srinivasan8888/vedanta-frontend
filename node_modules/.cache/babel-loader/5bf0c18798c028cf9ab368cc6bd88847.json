{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\src\\\\components\\\\popup_dashboard\\\\PopupDashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../popup_dashboard/popupdashboard.scss';\nimport DeviceThermostatIcon from '@mui/icons-material/DeviceThermostat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst generateDemoData = (info, startSensorIndex, endSensorIndex) => {\n  const data = [];\n\n  for (let index = 0; index < info.length; index++) {\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\n      if (i <= 108) {\n        var _info$index;\n\n        data.push({\n          id: `${i}`,\n          sensor: `CBT${i}`,\n          value: `${info[index][`sensor${i}`]} °c`,\n          updatedAt: (_info$index = info[index]) === null || _info$index === void 0 ? void 0 : _info$index.updatedAt\n        });\n      }\n    }\n  }\n\n  return data;\n};\n\nconst PopupDashboard = _ref => {\n  _s();\n\n  let {\n    open_dash,\n    onClose,\n    waveGuide\n  } = _ref;\n  const [info, setInfo] = useState([]);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!open_dash) return;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4000/sensor/updated\");\n        const infoVal = await response.json();\n        setInfo(infoVal);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    const interval = setInterval(() => {\n      fetchData();\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [open_dash]);\n\n  if (!open_dash) {\n    return null;\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n\n  const startSensorIndex = (waveGuide - 1) * 10 + 1;\n  const endSensorIndex = waveGuide * 10;\n  const data = generateDemoData(info, startSensorIndex, endSensorIndex);\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay-dash\",\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), info.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popupstyledash\",\n      children: data.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left text-base\",\n            children: /*#__PURE__*/_jsxDEV(DeviceThermostatIcon, {\n              className: \"icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right flex flex-col justify-around gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sensor-name text-xl te\",\n              children: item.sensor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"value text-xl\",\n              children: item.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"load\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \" load__text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true), document.getElementById('portaldashboard'));\n};\n\n_s(PopupDashboard, \"08ODIRuwfWf8ImgYsOO2QKRV/eU=\");\n\n_c = PopupDashboard;\nexport default PopupDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupDashboard\");","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/components/popup_dashboard/PopupDashboard.jsx"],"names":["React","useState","useEffect","ReactDOM","DeviceThermostatIcon","generateDemoData","info","startSensorIndex","endSensorIndex","data","index","length","i","push","id","sensor","value","updatedAt","PopupDashboard","open_dash","onClose","waveGuide","setInfo","error","setError","fetchData","response","fetch","infoVal","json","interval","setInterval","clearInterval","message","createPortal","map","item","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../popup_dashboard/popupdashboard.scss';\r\nimport DeviceThermostatIcon from '@mui/icons-material/DeviceThermostat';\r\n\r\nconst generateDemoData = (info, startSensorIndex, endSensorIndex) => {\r\n  const data = [];\r\n  for (let index = 0; index < info.length; index++) {\r\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\r\n      if(i <= 108) {\r\n        data.push({\r\n          id: `${i}`,\r\n          sensor: `CBT${i}`,\r\n          value: `${info[index][`sensor${i}`]} °c`,\r\n          updatedAt: info[index]?.updatedAt,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n};\r\n\r\nconst PopupDashboard = ({ open_dash, onClose, waveGuide }) => {\r\n  const [info, setInfo] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!open_dash) return;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/updated\");\r\n        const infoVal = await response.json();\r\n        setInfo(infoVal);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      fetchData();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [open_dash]);\r\n\r\n  if (!open_dash) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n\r\n  const startSensorIndex = (waveGuide - 1) * 10 + 1;\r\n  const endSensorIndex = waveGuide * 10;\r\n\r\n  const data = generateDemoData(info, startSensorIndex, endSensorIndex);\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className=\"overlay-dash\" onClick={onClose} />\r\n\r\n      {info.length !== 0 ? (\r\n        <div className='popupstyledash'>\r\n        \r\n        {data.map((item, index) => {\r\n          return (\r\n            <div className=\"box\" key={index}>\r\n          <div className=\"left text-base\">\r\n            <DeviceThermostatIcon className='icon'/>\r\n          </div>\r\n          <div className=\"right flex flex-col justify-around gap-2\">\r\n            <div className=\"sensor-name text-xl te\">\r\n              {item.sensor}\r\n            </div>\r\n            <div className=\"value text-xl\">\r\n              {item.value}\r\n            </div>\r\n          </div>\r\n        </div>\r\n          );\r\n        })}\r\n      </div>\r\n      ) : (\r\n        <div className='load'>\r\n          <span className=' load__text'>Loading...</span>\r\n        </div>\r\n      )}\r\n    </>,\r\n    document.getElementById('portaldashboard')\r\n  );\r\n};\r\n\r\nexport default PopupDashboard;\r\n"]},"metadata":{},"sourceType":"module"}