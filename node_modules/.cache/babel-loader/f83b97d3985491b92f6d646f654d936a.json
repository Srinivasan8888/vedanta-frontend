{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\src\\\\pages\\\\reports\\\\ReportPopup.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"../reports/reportpopup.scss\";\nimport * as XLSX from \"xlsx\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\nimport { saveAs } from \"file-saver\"; // import logo from \"../../assets/images/download.jpg\";\n\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport TextSnippetIcon from '@mui/icons-material/TextSnippet'; // class level\n// Register fonts for pdfmake\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst generateData = (inforeport, startSensorIndex, endSensorIndex) => {\n  const data = [];\n\n  for (let index = 0; index < inforeport.length; index++) {\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\n      if (i <= 108) {\n        var _inforeport$index;\n\n        data.push({\n          id: `${i}`,\n          sensor: `Sensor ${i}`,\n          sensorName: `CBT${i}`,\n          updatedAt: (_inforeport$index = inforeport[index]) === null || _inforeport$index === void 0 ? void 0 : _inforeport$index.updatedAt\n        });\n      }\n    }\n\n    return data;\n  }\n}; // function\n\n\nconst ReportPopup = _ref => {\n  _s();\n\n  let {\n    Openreportdash,\n    Closereportdash,\n    waveGuide\n  } = _ref;\n  const [inforeport, setInforeport] = useState([]);\n  const [error, SetError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\n        const infoVal = await response.json();\n        setInforeport(infoVal);\n      } catch (error) {\n        SetError(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!Openreportdash) {\n    return null;\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!inforeport) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n\n  const startSensorIndex = (waveGuide - 1) * 10 + 1;\n  const endSensorIndex = waveGuide * 10;\n  const data = generateData(inforeport, startSensorIndex, endSensorIndex);\n\n  const sensorFind = sensor => {\n    const sensorData = [];\n    const updateTime = [];\n    const trimedSensor = sensor.replace(/ /g, \"\");\n    const sensorName = trimedSensor.toLowerCase();\n\n    for (let index = 0; index < inforeport.length; index++) {\n      var _inforeport$index2, _inforeport$index3;\n\n      sensorData[index] = (_inforeport$index2 = inforeport[index]) === null || _inforeport$index2 === void 0 ? void 0 : _inforeport$index2[sensorName];\n      updateTime[index] = (_inforeport$index3 = inforeport[index]) === null || _inforeport$index3 === void 0 ? void 0 : _inforeport$index3.updatedAt;\n    }\n\n    console.log(updateTime);\n    return {\n      sensorData,\n      updateTime\n    };\n  };\n\n  const generateExcel = item => {\n    const {\n      sensorData,\n      updateTime\n    } = sensorFind(item.sensor);\n    const data = [[item.sensorName, \"time\"], ...sensorData.map((Value, index) => [Value, updateTime[index]])];\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.aoa_to_sheet(data);\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"sheet1\");\n    XLSX.writeFile(workbook, \"xyma_vedanta.xlsx\");\n  };\n\n  const generatePdf = item => {\n    const {\n      sensorData,\n      updateTime\n    } = sensorFind(item.sensor);\n    const filteredData = sensorData.filter((value, index) => value !== undefined && updateTime[index] !== undefined);\n    const filteredUpdateTime = updateTime.filter((value, index) => value !== undefined && sensorData[index] !== undefined);\n    const docDefinition = {\n      content: [// {\n      //   margin: [0, 0, 0, 0],\n      //   columns: [\n      //     {\n      //       image: logo,\n      //       width: 40,\n      //     },\n      //   ],\n      // },\n      {\n        canvas: [// Line to separate header and body\n        {\n          type: \"line\",\n          x1: 0,\n          y1: 5,\n          x2: 595 - 2 * 40,\n          y2: 5,\n          lineWidth: 0.5\n        }]\n      }, {\n        table: {\n          widths: [\"50%\", \"50%\"],\n          headerRows: 1,\n          body: [[{\n            text: item.sensorName,\n            bold: true\n          }, {\n            text: \"Time\",\n            bold: true\n          }], ...filteredData.map((value, index) => [value, filteredUpdateTime[index]])]\n        }\n      }],\n      styles: {\n        header: {\n          fontsize: 16,\n          bold: true,\n          marginBottom: 10\n        }\n      }\n    };\n    const pdfDocGenerator = pdfMake.createPdf(docDefinition);\n    pdfDocGenerator.getBlob(blob => {\n      saveAs(blob, item.sensorName + \"_xyma.pdf\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay-report\",\n      onClick: Closereportdash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"report-dash\",\n      children: data.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-report-popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-base\",\n            children: item.sensorName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pdf\",\n              onClick: () => {\n                generatePdf(item);\n              },\n              children: [/*#__PURE__*/_jsxDEV(PictureAsPdfIcon, {\n                className: \"icon-report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-xs\",\n                children: \"Pdf\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"xl\",\n              onClick: () => {\n                generateExcel(item);\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextSnippetIcon, {\n                className: \"icon-report\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-xs\",\n                children: \"Excel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReportPopup, \"GX5ECyClDjmrvPioCg1mg1DRvAk=\");\n\n_c = ReportPopup;\nexport default ReportPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReportPopup\");","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/pages/reports/ReportPopup.jsx"],"names":["React","useState","useEffect","XLSX","pdfMake","pdfFonts","saveAs","PictureAsPdfIcon","TextSnippetIcon","vfs","generateData","inforeport","startSensorIndex","endSensorIndex","data","index","length","i","push","id","sensor","sensorName","updatedAt","ReportPopup","Openreportdash","Closereportdash","waveGuide","setInforeport","error","SetError","fetchData","response","fetch","infoVal","json","message","sensorFind","sensorData","updateTime","trimedSensor","replace","toLowerCase","console","log","generateExcel","item","map","Value","workbook","utils","book_new","worksheet","aoa_to_sheet","book_append_sheet","writeFile","generatePdf","filteredData","filter","value","undefined","filteredUpdateTime","docDefinition","content","canvas","type","x1","y1","x2","y2","lineWidth","table","widths","headerRows","body","text","bold","styles","header","fontsize","marginBottom","pdfDocGenerator","createPdf","getBlob","blob"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../reports/reportpopup.scss\";\r\nimport * as XLSX from \"xlsx\";\r\nimport pdfMake from \"pdfmake/build/pdfmake\";\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport { saveAs } from \"file-saver\";\r\n// import logo from \"../../assets/images/download.jpg\";\r\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\r\nimport TextSnippetIcon from '@mui/icons-material/TextSnippet';\r\n                                                       \r\n                                                      // class level\r\n// Register fonts for pdfmake\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nconst generateData = (inforeport, startSensorIndex, endSensorIndex) => {\r\n  const data = [];\r\n\r\n  for (let index = 0; index < inforeport.length; index++) {\r\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\r\n      if(i <= 108) {\r\n        data.push({\r\n        id: `${i}`,\r\n        sensor: `Sensor ${i}`,\r\n        sensorName: `CBT${i}`,\r\n        updatedAt: inforeport[index]?.updatedAt,\r\n      });\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n};\r\n                                                           // function\r\nconst ReportPopup = ({ Openreportdash, Closereportdash, waveGuide }) => {\r\n\r\n  const [inforeport, setInforeport] = useState([]);\r\n  const [error, SetError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\r\n        const infoVal = await response.json();\r\n        setInforeport(infoVal);\r\n      } catch (error) {\r\n        SetError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!Openreportdash) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n\r\n  if (!inforeport) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const startSensorIndex = (waveGuide - 1) * 10 + 1;\r\n  const endSensorIndex = waveGuide * 10;\r\n\r\n  const data = generateData(inforeport, startSensorIndex, endSensorIndex);\r\n\r\n  const sensorFind = (sensor) => {\r\n    const sensorData = [];\r\n    const updateTime = [];\r\n    const trimedSensor = sensor.replace(/ /g, \"\");\r\n    const sensorName = trimedSensor.toLowerCase();\r\n\r\n    for (let index = 0; index < inforeport.length; index++) {\r\n      sensorData[index] = inforeport[index]?.[sensorName];\r\n      updateTime[index] = inforeport[index]?.updatedAt;\r\n    }\r\n    console.log(updateTime);\r\n    return { sensorData, updateTime };\r\n  };\r\n\r\n  const generateExcel = (item) => {\r\n    const { sensorData, updateTime } = sensorFind(item.sensor);\r\n    const data = [\r\n      [item.sensorName, \"time\"],\r\n      ...sensorData.map((Value, index) => [Value, updateTime[index]]),\r\n    ];\r\n    const workbook = XLSX.utils.book_new();\r\n    const worksheet = XLSX.utils.aoa_to_sheet(data);\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"sheet1\");\r\n    XLSX.writeFile(workbook, \"xyma_vedanta.xlsx\");\r\n  };\r\n\r\n  const generatePdf = (item) => {\r\n    const { sensorData, updateTime } = sensorFind(item.sensor);\r\n\r\n    const filteredData = sensorData.filter(\r\n      (value, index) => value !== undefined && updateTime[index] !== undefined\r\n    );\r\n    const filteredUpdateTime = updateTime.filter(\r\n      (value, index) => value !== undefined && sensorData[index] !== undefined\r\n    );\r\n\r\n    const docDefinition = {\r\n      content: [\r\n        // {\r\n        //   margin: [0, 0, 0, 0],\r\n        //   columns: [\r\n        //     {\r\n        //       image: logo,\r\n        //       width: 40,\r\n        //     },\r\n        //   ],\r\n        // },\r\n        {\r\n          canvas: [\r\n            // Line to separate header and body\r\n            {\r\n              type: \"line\",\r\n              x1: 0,\r\n              y1: 5,\r\n              x2: 595 - 2 * 40,\r\n              y2: 5,\r\n              lineWidth: 0.5,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          table: {\r\n            widths: [\"50%\", \"50%\"],\r\n            headerRows: 1,\r\n            body: [\r\n              [\r\n                { text: item.sensorName, bold: true },\r\n                { text: \"Time\", bold: true },\r\n              ],\r\n              ...filteredData.map((value, index) => [\r\n                value,\r\n                filteredUpdateTime[index],\r\n              ]),\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n      styles: {\r\n        header: {\r\n          fontsize: 16,\r\n          bold: true,\r\n          marginBottom: 10,\r\n        },\r\n      },\r\n    };\r\n    const pdfDocGenerator = pdfMake.createPdf(docDefinition);\r\n    pdfDocGenerator.getBlob((blob) => {\r\n      saveAs(blob, item.sensorName + \"_xyma.pdf\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overlay-report\" onClick={Closereportdash} />\r\n\r\n      <div className=\"report-dash\">\r\n        {data.map((item, index) => {\r\n          return (\r\n            <div className=\"box-report-popup\" key={index}>\r\n               \r\n              <span className=\"text-base\">{item.sensorName}</span>\r\n              <div className=\"btn\">\r\n                <div className=\"pdf\" onClick={()=>{generatePdf(item)}}>\r\n                  <PictureAsPdfIcon className=\"icon-report\"/>\r\n                  <span className=\"text-xs\">Pdf</span>\r\n                </div>\r\n                <div className=\"xl\" onClick={()=>{generateExcel(item)}}>\r\n                  <TextSnippetIcon className=\"icon-report\"/>\r\n                  <span className=\"text-xs\">Excel</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReportPopup;\r\n"]},"metadata":{},"sourceType":"module"}