{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import\"../graph/chartdash.scss\";import{Line}from\"react-chartjs-2\";import{useState,useEffect}from\"react\";// class level\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var generateData=function generateData(inforeport,startSensorIndex,endSensorIndex){var data=[];for(var index=0;index<inforeport.length;index++){for(var i=startSensorIndex;i<=endSensorIndex;i++){if(i<=108){var _inforeport$index;data.push({id:\"\".concat(i),sensor:\"Sensor \".concat(i),sensorName:\"CBT\".concat(i),updatedAt:(_inforeport$index=inforeport[index])===null||_inforeport$index===void 0?void 0:_inforeport$index.updatedAt});}}return data;}};// function\nvar ChartDash=function ChartDash(_ref){var openGraph=_ref.openGraph,closeGraph=_ref.closeGraph,waveGuideSelected=_ref.waveGuideSelected;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),infoChart=_useState2[0],setInfoChart=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],SetError=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),sensorData=_useState6[0],setSensorData=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),updateTime=_useState8[0],setUpdateTime=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),sensorName=_useState10[0],setSenserName=_useState10[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,infoVal;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"http://localhost:4000/sensor/find\");case 3:response=_context.sent;_context.next=6;return response.json();case 6:infoVal=_context.sent;setInfoChart(infoVal);_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);SetError(_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[]);if(!openGraph){return null;}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error.message]});}if(!infoChart){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}var startSensorIndex=(waveGuideSelected-1)*10+1;var endSensorIndex=waveGuideSelected*10;var chartData=generateData(infoChart,startSensorIndex,endSensorIndex);var selectSensor=function selectSensor(sensor){var sensorval=[];var updateTime=[];var trimedSensor=sensor.replace(/ /g,\"\");var sensorName=trimedSensor.toLowerCase();for(var index=0;index<infoChart.length;index++){var _infoChart$index,_infoChart$index2;sensorval[index]=(_infoChart$index=infoChart[index])===null||_infoChart$index===void 0?void 0:_infoChart$index[sensorName];updateTime[index]=(_infoChart$index2=infoChart[index])===null||_infoChart$index2===void 0?void 0:_infoChart$index2.updatedAt;}setSensorData(sensorval);setUpdateTime(updateTime);setSenserName(sensorName);};var chartName=sensorName;var updateChartName;if(chartName){updateChartName=chartName.replace(\"sensor\",\"CBT\");}var data={labels:updateTime,datasets:[{label:\"\".concat(updateChartName),data:sensorData,fill:false,borderColor:'rgba(75,192,192,1)',backgroundColor:'rgba(75, 192, 192, 0.2)',tension:0.1}]};var options={scales:{y:{beginAtZero:true}}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"overlay-graph-dash\",onClick:closeGraph}),/*#__PURE__*/_jsxs(\"div\",{className:\"chartdash\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart\",children:/*#__PURE__*/_jsx(Line,{data:data,options:options})}),/*#__PURE__*/_jsx(\"div\",{className:\"chartSelection\",children:/*#__PURE__*/_jsx(\"div\",{className:\"box-dash\",children:chartData.map(function(item,index){return/*#__PURE__*/_jsx(\"div\",{className:\"box-chart-dash\",onClick:function onClick(){selectSensor(item.sensor);},children:/*#__PURE__*/_jsx(\"span\",{className:\"text-base\",children:item.sensorName})},index);})})})]})]});};export default ChartDash;","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/pages/graph/ChartDash.jsx"],"names":["Line","useState","useEffect","generateData","inforeport","startSensorIndex","endSensorIndex","data","index","length","i","push","id","sensor","sensorName","updatedAt","ChartDash","openGraph","closeGraph","waveGuideSelected","infoChart","setInfoChart","error","SetError","sensorData","setSensorData","updateTime","setUpdateTime","setSenserName","fetchData","fetch","response","json","infoVal","message","chartData","selectSensor","sensorval","trimedSensor","replace","toLowerCase","chartName","updateChartName","labels","datasets","label","fill","borderColor","backgroundColor","tension","options","scales","y","beginAtZero","map","item"],"mappings":"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","sourcesContent":["import \"../graph/chartdash.scss\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n                                                                 // class level\r\nconst generateData = (inforeport, startSensorIndex, endSensorIndex) => {\r\n  const data = [];\r\n\r\n  for (let index = 0; index < inforeport.length; index++) {\r\n    for (let i = startSensorIndex; i <= endSensorIndex; i++) {\r\n      if(i <= 108) {\r\n        data.push({\r\n          id: `${i}`,\r\n          sensor: `Sensor ${i}`,\r\n          sensorName: `CBT${i}`,\r\n          updatedAt: inforeport[index]?.updatedAt,\r\n        });\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n};\r\n                                                               // function\r\nconst ChartDash = ({ openGraph, closeGraph, waveGuideSelected }) => {\r\n\r\n  const [infoChart, setInfoChart] = useState([]);\r\n  const [error, SetError] = useState(false);\r\n\r\n  const [sensorData, setSensorData] = useState([]);\r\n  const [updateTime, setUpdateTime] = useState();\r\n  const [sensorName, setSenserName] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\r\n        const infoVal = await response.json();\r\n        setInfoChart(infoVal);\r\n      } catch (error) {\r\n        SetError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!openGraph) {\r\n    return null;\r\n  }\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n  if (!infoChart) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  \r\n  const startSensorIndex = (waveGuideSelected - 1) * 10 + 1;\r\n  const endSensorIndex = waveGuideSelected * 10;\r\n\r\n  const chartData = generateData(infoChart, startSensorIndex, endSensorIndex);\r\n\r\n  const selectSensor = (sensor) => {\r\n    const sensorval = [];\r\n    const updateTime = [];\r\n    const trimedSensor = sensor.replace(/ /g, \"\");\r\n    const sensorName = trimedSensor.toLowerCase();\r\n\r\n    for (let index = 0; index < infoChart.length; index++) {\r\n      sensorval[index] = infoChart[index]?.[sensorName];\r\n      updateTime[index] = infoChart[index]?.updatedAt;\r\n    }\r\n    setSensorData(sensorval);\r\n    setUpdateTime(updateTime);\r\n    setSenserName(sensorName);\r\n  };\r\n\r\n  var chartName = sensorName;\r\n  var updateChartName;\r\n  if (chartName) {\r\n        updateChartName = chartName.replace(\"sensor\", \"CBT\");\r\n    }\r\n  const data = {\r\n    labels: updateTime,\r\n    datasets: [\r\n      {\r\n        label: `${updateChartName}`,\r\n        data: sensorData,\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overlay-graph-dash\" onClick={closeGraph} />\r\n\r\n      <div className=\"chartdash\">\r\n        <div className=\"chart\">\r\n        <Line data={data} options={options} />\r\n        </div>\r\n\r\n        <div className=\"chartSelection\">\r\n        <div className=\"box-dash\">\r\n          {\r\n            chartData.map((item, index) => {\r\n              return (\r\n            <div className=\"box-chart-dash\" key={index} onClick={()=>{selectSensor(item.sensor)}}>\r\n            <span className=\"text-base\">{item.sensorName}</span>\r\n            </div>\r\n              )\r\n            })\r\n          }\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartDash;\r\n"]},"metadata":{},"sourceType":"module"}