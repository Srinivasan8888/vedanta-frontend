{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srini\\\\OneDrive\\\\Desktop\\\\vedenta\\\\vedanta-multi-sensor\\\\src\\\\pages\\\\graph\\\\Graph.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport '../graph/graph.scss';\nimport ChartDash from './ChartDash';\nimport { isEqual } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph = () => {\n  _s();\n\n  const chartRef = useRef(null);\n  const [isOpengraph, setIsOpengrph] = useState();\n  const [infoGraph, setInfoGraph] = useState([]);\n  const [error, setError] = useState(false);\n  const [infoFind, setInfoFind] = useState([]);\n  const [peakName, setPeakName] = useState();\n  const [graphData, setGraphData] = useState([]);\n  const [graphUpdateData, setGraphUpdateData] = useState([]);\n  const [selectedWaveGuideChart, setSelectedWaveGuideChart] = useState();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4000/sensor/updated\");\n        const infoVal = await response.json();\n        setInfoGraph(infoVal);\n      } catch (error) {\n        setError(error);\n      }\n    };\n\n    const interval = setInterval(() => {\n      fetchData();\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  useEffect(() => {\n    const sensorArray = [];\n    var topPeak;\n\n    for (let index = 1; index <= 108; index++) {\n      var _infoGraph$;\n\n      let sensorName = `sensor${index}`;\n      const val = (_infoGraph$ = infoGraph[0]) === null || _infoGraph$ === void 0 ? void 0 : _infoGraph$[sensorName];\n      sensorArray.push({\n        sensorName,\n        val\n      });\n      const descending = sensorArray.sort((a, b) => b.val - a.val);\n      topPeak = descending.slice(0, 5);\n    }\n\n    if (topPeak !== undefined) {\n      setPeakName(topPeak[0].sensorName);\n    }\n  }, [infoGraph]);\n  useEffect(() => {\n    let chart = null; // Initialize chart as null\n\n    let peakNameChart = peakName;\n    var updateName;\n\n    if (peakNameChart) {\n      updateName = peakNameChart.replace(\"sensor\", \"CBT\");\n    } // Function to create or update the chart\n\n\n    const createOrUpdateChart = () => {\n      // Sample data for the Line Chart\n      const data = {\n        labels: graphUpdateData,\n        datasets: [{\n          label: `Peak ${updateName}`,\n          data: graphData,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          tension: 0.1\n        }]\n      }; // Chart.js configuration options\n\n      const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n\n      if (chart) {\n        // Check if chart data or options have changed\n        const chartDataChanged = !isEqual(chart.data, data);\n        const chartOptionsChanged = !isEqual(chart.options, options);\n\n        if (chartDataChanged || chartOptionsChanged) {\n          // Update the chart data and options\n          chart.data = data;\n          chart.options = options;\n          chart.update(); // Update the chart with new data and options\n        }\n      } else {\n        // Create a new Line Chart instance\n        chart = new Chart(chartRef.current, {\n          type: 'line',\n          data: data,\n          options: options\n        });\n      }\n    }; // Call the createOrUpdateChart function initially\n\n\n    createOrUpdateChart(); // Cleanup on unmount\n\n    return () => {\n      if (chart) {\n        chart.destroy();\n      }\n    };\n  }, [graphData, graphUpdateData, peakName]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4000/sensor/find\");\n        const infoVal = await response.json();\n        setInfoFind(infoVal);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const interval = setInterval(() => {\n      fetchData();\n    }, 5000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  useEffect(() => {\n    const peakArray = [];\n    const updateTime = [];\n\n    for (let index = 0; index < infoFind.length; index++) {\n      if (peakName !== undefined || null) {\n        var _infoFind$index, _infoFind$index2;\n\n        peakArray[index] = (_infoFind$index = infoFind[index]) === null || _infoFind$index === void 0 ? void 0 : _infoFind$index[peakName];\n        updateTime[index] = (_infoFind$index2 = infoFind[index]) === null || _infoFind$index2 === void 0 ? void 0 : _infoFind$index2.updatedAt;\n      }\n    }\n\n    setGraphData(peakArray);\n    setGraphUpdateData(updateTime);\n  }, [infoFind, peakName]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!infoGraph) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 12\n    }, this);\n  }\n\n  const handleWaveGuideClickChart = waveGuideNumber => {\n    setSelectedWaveGuideChart(waveGuideNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box-graph\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        height: `70px`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(1);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT1-CBT10)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(2);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT11-CBT20)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(3);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT21-CBT30)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(4);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT31-CBT40)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(5);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT41-CBT50)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(6);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT51-CBT60)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(7);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT61-CBT70)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(8);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT71-CBT80)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(9);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT81-CBT90)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(10);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT91-CBT100)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box-chart\",\n        onClick: () => {\n          setIsOpengrph(true);\n          handleWaveGuideClickChart(11);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"waveGuide 11\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: \"(CBT101-CBT108)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartDash, {\n        openGraph: isOpengraph,\n        closeGraph: () => setIsOpengrph(false),\n        waveGuideSelected: selectedWaveGuideChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Graph, \"qbqwBMzwH4Ch/RsfuzEN3tCw4Iw=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["C:/Users/srini/OneDrive/Desktop/vedenta/vedanta-multi-sensor/src/pages/graph/Graph.jsx"],"names":["React","useEffect","useState","useRef","Chart","ChartDash","isEqual","Graph","chartRef","isOpengraph","setIsOpengrph","infoGraph","setInfoGraph","error","setError","infoFind","setInfoFind","peakName","setPeakName","graphData","setGraphData","graphUpdateData","setGraphUpdateData","selectedWaveGuideChart","setSelectedWaveGuideChart","fetchData","response","fetch","infoVal","json","interval","setInterval","clearInterval","sensorArray","topPeak","index","sensorName","val","push","descending","sort","a","b","slice","undefined","chart","peakNameChart","updateName","replace","createOrUpdateChart","data","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","scales","y","beginAtZero","chartDataChanged","chartOptionsChanged","update","current","type","destroy","console","log","peakArray","updateTime","length","updatedAt","message","handleWaveGuideClickChart","waveGuideNumber"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,QAAxB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM,CAACM,WAAD,EAAcC,aAAd,IAA+BR,QAAQ,EAA7C;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,EAAxC;AAEA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM,CAACqB,sBAAD,EAAyBC,yBAAzB,IAAsDtB,QAAQ,EAApE;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,CAA5B;AACA,cAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAjB,QAAAA,YAAY,CAACgB,OAAD,CAAZ;AACD,OAJD,CAIE,OAAOf,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KARD;;AASA,UAAMiB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCN,MAAAA,SAAS;AACV,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAM;AACXO,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAFD;AAGD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA7B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgC,WAAW,GAAG,EAApB;AACA,QAAIC,OAAJ;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,GAA7B,EAAkCA,KAAK,EAAvC,EAA2C;AAAA;;AACzC,UAAIC,UAAU,GAAI,SAAQD,KAAM,EAAhC;AACA,YAAME,GAAG,kBAAG1B,SAAS,CAAC,CAAD,CAAZ,gDAAG,YAAeyB,UAAf,CAAZ;AACAH,MAAAA,WAAW,CAACK,IAAZ,CAAiB;AAACF,QAAAA,UAAD;AAAaC,QAAAA;AAAb,OAAjB;AACA,YAAME,UAAU,GAAGN,WAAW,CAACO,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACL,GAAF,GAAQI,CAAC,CAACJ,GAArC,CAAnB;AACAH,MAAAA,OAAO,GAAGK,UAAU,CAACI,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAV;AACD;;AACD,QAAGT,OAAO,KAAKU,SAAf,EAAyB;AACvB1B,MAAAA,WAAW,CAACgB,OAAO,CAAC,CAAD,CAAP,CAAWE,UAAZ,CAAX;AACD;AACA,GAbM,EAaL,CAACzB,SAAD,CAbK,CAAT;AAeEV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4C,KAAK,GAAG,IAAZ,CADc,CACI;;AAElB,QAAIC,aAAa,GAAG7B,QAApB;AACA,QAAI8B,UAAJ;;AACA,QAAID,aAAJ,EAAmB;AACjBC,MAAAA,UAAU,GAAGD,aAAa,CAACE,OAAd,CAAsB,QAAtB,EAAgC,KAAhC,CAAb;AACD,KAPa,CASd;;;AACA,UAAMC,mBAAmB,GAAG,MAAM;AAChC;AACA,YAAMC,IAAI,GAAG;AACXC,QAAAA,MAAM,EAAE9B,eADG;AAEX+B,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAG,QAAON,UAAW,EAD5B;AAEEG,UAAAA,IAAI,EAAE/B,SAFR;AAGEmC,UAAAA,WAAW,EAAE,uBAHf;AAIEC,UAAAA,eAAe,EAAE,yBAJnB;AAKEC,UAAAA,OAAO,EAAE;AALX,SADQ;AAFC,OAAb,CAFgC,CAehC;;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,UAAU,EAAE,IADE;AAEdC,QAAAA,mBAAmB,EAAE,KAFP;AAGdC,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAE;AACDC,YAAAA,WAAW,EAAE;AADZ;AADG;AAHM,OAAhB;;AAUA,UAAIjB,KAAJ,EAAW;AACT;AACA,cAAMkB,gBAAgB,GAAG,CAACzD,OAAO,CAACuC,KAAK,CAACK,IAAP,EAAaA,IAAb,CAAjC;AACA,cAAMc,mBAAmB,GAAG,CAAC1D,OAAO,CAACuC,KAAK,CAACY,OAAP,EAAgBA,OAAhB,CAApC;;AAEA,YAAIM,gBAAgB,IAAIC,mBAAxB,EAA6C;AAC3C;AACAnB,UAAAA,KAAK,CAACK,IAAN,GAAaA,IAAb;AACAL,UAAAA,KAAK,CAACY,OAAN,GAAgBA,OAAhB;AACAZ,UAAAA,KAAK,CAACoB,MAAN,GAJ2C,CAI3B;AACjB;AACF,OAXD,MAWO;AACL;AACApB,QAAAA,KAAK,GAAG,IAAIzC,KAAJ,CAAUI,QAAQ,CAAC0D,OAAnB,EAA4B;AAClCC,UAAAA,IAAI,EAAE,MAD4B;AAElCjB,UAAAA,IAAI,EAAEA,IAF4B;AAGlCO,UAAAA,OAAO,EAAEA;AAHyB,SAA5B,CAAR;AAKD;AACF,KA7CD,CAVc,CAyDd;;;AACAR,IAAAA,mBAAmB,GA1DL,CA4Dd;;AACA,WAAO,MAAM;AACX,UAAIJ,KAAJ,EAAW;AACTA,QAAAA,KAAK,CAACuB,OAAN;AACD;AACF,KAJD;AAKD,GAlEQ,EAkEN,CAACjD,SAAD,EAAYE,eAAZ,EAA6BJ,QAA7B,CAlEM,CAAT;AAoEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,cAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAb,QAAAA,WAAW,CAACY,OAAD,CAAX;AACD,OAJD,CAIE,OAAOf,KAAP,EAAc;AACdwD,QAAAA,OAAO,CAACC,GAAR,CAAYzD,KAAZ;AACD;AACF,KARD;;AAUA,UAAMiB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCN,MAAAA,SAAS;AACV,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAM;AACXO,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAFD;AAGD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA7B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsE,SAAS,GAAG,EAAlB;AACA,UAAMC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIrC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGpB,QAAQ,CAAC0D,MAArC,EAA6CtC,KAAK,EAAlD,EAAsD;AACpD,UAAIlB,QAAQ,KAAK2B,SAAb,IAA0B,IAA9B,EAAoC;AAAA;;AAClC2B,QAAAA,SAAS,CAACpC,KAAD,CAAT,sBAAmBpB,QAAQ,CAACoB,KAAD,CAA3B,oDAAmB,gBAAkBlB,QAAlB,CAAnB;AACAuD,QAAAA,UAAU,CAACrC,KAAD,CAAV,uBAAoBpB,QAAQ,CAACoB,KAAD,CAA5B,qDAAoB,iBAAiBuC,SAArC;AACD;AACF;;AACDtD,IAAAA,YAAY,CAACmD,SAAD,CAAZ;AACAjD,IAAAA,kBAAkB,CAACkD,UAAD,CAAlB;AACD,GAXQ,EAWN,CAACzD,QAAD,EAAWE,QAAX,CAXM,CAAT;;AAcF,MAAIJ,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAAC8D,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAI,CAAChE,SAAL,EAAgB;AACd,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMiE,yBAAyB,GAAIC,eAAD,IAAqB;AACrDrD,IAAAA,yBAAyB,CAACqD,eAAD,CAAzB;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAQ,QAAA,GAAG,EAAErE,QAAb;AAAuB,QAAA,MAAM,EAAG;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAACE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eASE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAaE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAiBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAqBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,eAyBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF,eA6BE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA7BF,eAiCE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,CAAD,CAAzB;AAA6B,SAA3F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,eAqCE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,EAAD,CAAzB;AAA8B,SAA5F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cArCF,eAyCE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,OAAO,EAAE,MAAI;AAAClE,UAAAA,aAAa,CAAC,IAAD,CAAb;AAAqBkE,UAAAA,yBAAyB,CAAC,EAAD,CAAzB;AAA8B,SAA5F;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCF,eA0DE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEnE,WAAtB;AAAmC,QAAA,UAAU,EAAE,MAAIC,aAAa,CAAC,KAAD,CAAhE;AAAyE,QAAA,iBAAiB,EAAEa;AAA5F;AAAA;AAAA;AAAA;AAAA,cA1DF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuED,CA1OD;;GAAMhB,K;;KAAAA,K;AA4ON,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport '../graph/graph.scss';\r\nimport ChartDash from './ChartDash';\r\nimport { isEqual } from 'lodash';\r\n\r\nconst Graph = () => {\r\n  const chartRef = useRef(null);\r\n\r\n  const [isOpengraph, setIsOpengrph] = useState();\r\n\r\n  const [infoGraph, setInfoGraph] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  const [infoFind, setInfoFind] = useState([]);\r\n\r\n  const [peakName, setPeakName] = useState();\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [graphUpdateData, setGraphUpdateData] = useState([]);\r\n\r\n  const [selectedWaveGuideChart, setSelectedWaveGuideChart] = useState();\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/sensor/updated\");\r\n        const infoVal = await response.json();\r\n        setInfoGraph(infoVal);\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    const interval = setInterval(() => {\r\n      fetchData();\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sensorArray = [];\r\n    var topPeak;\r\n    for (let index = 1; index <= 108; index++) {\r\n      let sensorName = `sensor${index}`;\r\n      const val = infoGraph[0]?.[sensorName];\r\n      sensorArray.push({sensorName, val});\r\n      const descending = sensorArray.sort((a, b) => b.val - a.val);\r\n      topPeak = descending.slice(0, 5);\r\n    }\r\n    if(topPeak !== undefined){\r\n      setPeakName(topPeak[0].sensorName);\r\n    }\r\n    },[infoGraph]);\r\n\r\n    useEffect(() => {\r\n      let chart = null; // Initialize chart as null\r\n    \r\n      let peakNameChart = peakName;\r\n      var updateName;\r\n      if (peakNameChart) {\r\n        updateName = peakNameChart.replace(\"sensor\", \"CBT\");\r\n      }\r\n    \r\n      // Function to create or update the chart\r\n      const createOrUpdateChart = () => {\r\n        // Sample data for the Line Chart\r\n        const data = {\r\n          labels: graphUpdateData,\r\n          datasets: [\r\n            {\r\n              label: `Peak ${updateName}`,\r\n              data: graphData,\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        };\r\n    \r\n        // Chart.js configuration options\r\n        const options = {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        };\r\n    \r\n        if (chart) {\r\n          // Check if chart data or options have changed\r\n          const chartDataChanged = !isEqual(chart.data, data);\r\n          const chartOptionsChanged = !isEqual(chart.options, options);\r\n    \r\n          if (chartDataChanged || chartOptionsChanged) {\r\n            // Update the chart data and options\r\n            chart.data = data;\r\n            chart.options = options;\r\n            chart.update(); // Update the chart with new data and options\r\n          }\r\n        } else {\r\n          // Create a new Line Chart instance\r\n          chart = new Chart(chartRef.current, {\r\n            type: 'line',\r\n            data: data,\r\n            options: options,\r\n          });\r\n        }\r\n      };\r\n    \r\n      // Call the createOrUpdateChart function initially\r\n      createOrUpdateChart();\r\n    \r\n      // Cleanup on unmount\r\n      return () => {\r\n        if (chart) {\r\n          chart.destroy();\r\n        }\r\n      };\r\n    }, [graphData, graphUpdateData, peakName]);\r\n    \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch(\"http://localhost:4000/sensor/find\");\r\n          const infoVal = await response.json();\r\n          setInfoFind(infoVal);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n    \r\n      const interval = setInterval(() => {\r\n        fetchData();\r\n      }, 5000);\r\n    \r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n      const peakArray = [];\r\n      const updateTime = [];\r\n      for (let index = 0; index < infoFind.length; index++) {\r\n        if (peakName !== undefined || null) {\r\n          peakArray[index] = infoFind[index]?.[peakName];\r\n          updateTime[index] = infoFind[index]?.updatedAt;\r\n        }\r\n      }\r\n      setGraphData(peakArray);\r\n      setGraphUpdateData(updateTime);\r\n    }, [infoFind, peakName]);\r\n    \r\n    \r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n  if (!infoGraph) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const handleWaveGuideClickChart = (waveGuideNumber) => {\r\n    setSelectedWaveGuideChart(waveGuideNumber);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div className=\"box-graph\">\r\n        <canvas ref={chartRef} height={`70px`}/>\r\n      </div>\r\n      \r\n      <div className=\"box\">\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(1)}}>\r\n          <h1>waveGuide 1</h1>\r\n          <span className=\"text-sm\">(CBT1-CBT10)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(2)}}>\r\n          <h1>waveGuide 2</h1>\r\n          <span className=\"text-sm\">(CBT11-CBT20)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(3)}}>\r\n          <h1>waveGuide 3</h1>\r\n          <span className=\"text-sm\">(CBT21-CBT30)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(4)}}>\r\n          <h1>waveGuide 4</h1>\r\n          <span className=\"text-sm\">(CBT31-CBT40)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(5)}}>\r\n          <h1>waveGuide 5</h1>\r\n          <span className=\"text-sm\">(CBT41-CBT50)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(6)}}>\r\n          <h1>waveGuide 6</h1>\r\n          <span className=\"text-sm\">(CBT51-CBT60)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(7)}}>\r\n          <h1>waveGuide 7</h1>\r\n          <span className=\"text-sm\">(CBT61-CBT70)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(8)}}>\r\n          <h1>waveGuide 8</h1>\r\n          <span className=\"text-sm\">(CBT71-CBT80)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(9)}}>\r\n          <h1>waveGuide 9</h1>\r\n          <span className=\"text-sm\">(CBT81-CBT90)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(10)}}>\r\n          <h1>waveGuide 10</h1>\r\n          <span className=\"text-sm\">(CBT91-CBT100)</span>\r\n        </div>\r\n        <div className=\"box-chart\" onClick={()=>{setIsOpengrph(true); handleWaveGuideClickChart(11)}}>\r\n          <h1>waveGuide 11</h1>\r\n          <span className=\"text-sm\">(CBT101-CBT108)</span>\r\n        </div>\r\n        {/* <div className=\"box-chart hide\">\r\n          <h1>waveGuide 12</h1>\r\n        </div>\r\n        <div className=\"box-chart hide\">\r\n          <h1>waveGuide 13</h1>\r\n        </div>\r\n        <div className=\"box-chart hide\">\r\n          <h1>waveGuide 14</h1>\r\n        </div>\r\n        <div className=\"box-chart hide\">\r\n          <h1>waveGuide 15</h1>\r\n        </div> */}\r\n\r\n        <ChartDash openGraph={isOpengraph} closeGraph={()=>setIsOpengrph(false)} waveGuideSelected={selectedWaveGuideChart} />\r\n        \r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;"]},"metadata":{},"sourceType":"module"}